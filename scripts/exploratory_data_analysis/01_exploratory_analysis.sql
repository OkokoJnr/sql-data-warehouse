--GENERATE A REPORT TAT SHOPWS ALL KEY METRICS OF THE BUSINESS
    /*
        NAME: exploratory_analysis.sql
        DESCRIPTION: This script generates a report that shows all key metrics of the business.
    */

SELECT 'Total Sales' AS measure_name, SUM(sales_amount) AS measure_value FROM gold.fact_sales
UNION ALL
SELECT 'Total Orders' AS measure_name, COUNT(DISTINCT order_number) AS measure_value FROM gold.fact_sales
UNION ALL
SELECT 'Total Customers' AS measure_name, COUNT(DISTINCT customer_key) AS measure_value FROM gold.dim_customers
UNION ALL
SELECT 'Total Products' AS measure_name, COUNT(DISTINCT product_key) AS measure_value FROM gold.dim_products
UNION ALL
SELECT 'Total Quantity Sold' AS measure_name, SUM(quantity) AS measure_value FROM gold.fact_sales
UNION ALL
SELECT 'Average Order Value' AS measure_name, AVG(sales_amount) AS measure_value FROM gold.fact_sales


--MAGNITUDE ANALYSIS -Comparing measure values across various dimensions

--1. Total customers by country
SELECT 
    country,
    COUNT(customer_id) AS total_customer
FROM gold.dim_customers
GROUP BY country
ORDER BY total_customer DESC;

--2. Total customers by gender
SELECT 
    gender,
    COUNT(customer_id) AS total_customers
FROM gold.dim_customers
GROUP BY gender
ORDER BY total_customers DESC;

--3. Total Products AND AVERAGE COSTS IN category
SELECT
    category,
    COUNT(product_number) AS total_products,
    ROUND(AVG(cost)::NUMERIC, 2)
FROM gold.dim_products
GROUP BY category
ORDER BY total_products DESC;

--4. Total revenue generated for each category

SELECT
    dp.category,
    SUM(sales_amount) AS total_revenue
FROM gold.fact_sales fs
LEFT JOIN gold.dim_products dp
ON  fs.product_key = dp.product_key
GROUP BY dp.category
ORDER BY total_revenue DESC;

--5. Total revenue generated by each customer
SELECT
    dc.customer_id,
    CONCAT(dc.first_name, ' ', dc.last_name),
    SUM(fs.sales_amount) AS total_revenue
FROM gold.fact_sales fs
LEFT JOIN gold.dim_customers dc
ON  fs.customer_key = dc.customer_key
GROUP BY dc.customer_id, dc.first_name, dc.last_name
ORDER BY total_revenue DESC;

--6. Distribution of sold items across countries
SELECT 
    dc.country,
    COUNT(fs.quantity) AS total_quantity
FROM gold.fact_sales fs
LEFT JOIN gold.dim_customers dc
ON  fs.customer_key = dc.customer_key
GROUP BY dc.country
ORDER BY total_quantity DESC;

SELECT 
    COUNT(quantity)
FROM gold.fact_sales 

--7. Total revenue generated for each category
    --Top 5
SELECT
    dp.product_name,
    SUM(sales_amount) AS total_revenue
FROM gold.fact_sales fs
LEFT JOIN gold.dim_products dp
ON  fs.product_key = dp.product_key
GROUP BY dp.product_name
ORDER BY total_revenue DESC
LIMIT 5;

    --Bottom 5
SELECT
    dp.product_name,
    SUM(sales_amount) AS total_revenue
FROM gold.fact_sales fs
LEFT JOIN gold.dim_products dp
ON  fs.product_key = dp.product_key
GROUP BY dp.product_name
ORDER BY total_revenue ASC
LIMIT 5;

--USING WINDOW FUNCTION 
SELECT * FROM (SELECT
dp.product_name,
  SUM(sales_amount) total_revenue,
  ROW_NUMBER() OVER(ORDER BY SUM(sales_amount) DESC) AS rank_products
FROM gold.fact_sales fs
LEFT JOIN gold.dim_products dp
ON  fs.product_key = dp.product_key
GROUP BY dp.product_name)
WHERE rank_products <= 5;

--top 10 customers
SELECT * FROM (
    SELECT
    dc.customer_id,
    CONCAT(dc.first_name, ' ', dc.last_name),
    SUM(fs.sales_amount) AS total_revenue,
    ROW_NUMBER() OVER(ORDER BY SUM(sales_amount) DESC) AS rank_customers
FROM gold.fact_sales fs
LEFT JOIN gold.dim_customers dc
ON  fs.customer_key = dc.customer_key
GROUP BY dc.customer_id, dc.first_name, dc.last_name
ORDER BY total_revenue DESC
)
WHERE rank_customers <= 10;

